def infix_to_postfix(expression):
    def precedence(operator):
        precedence_map = {'+': 1, '-': 1, '*': 2, '/': 2, '^': 3}
        return precedence_map.get(operator, 0)

    def is_operator(char):
        return char in "+-*/^"

    def higher_precedence(op1, op2):
        return precedence(op1) >= precedence(op2)

    postfix = []
    operator_stack = []

    for char in expression:
        if char.isalnum():
            postfix.append(char)
        elif is_operator(char):
            while operator_stack and is_operator(operator_stack[-1]) and higher_precedence(operator_stack[-1], char):
                postfix.append(operator_stack.pop())
            operator_stack.append(char)
        elif char == '(':
            operator_stack.append(char)
        elif char == ')':
            while operator_stack and operator_stack[-1] != '(':
                postfix.append(operator_stack.pop())
            operator_stack.pop()  # Remove the '('

    while operator_stack:
        postfix.append(operator_stack.pop())

    return ''.join(postfix)


# Test the function
infix_expression = "a + b * c - d / e ^ f"
postfix_expression = infix_to_postfix(infix_expression)
print("Infix Expression:", infix_expression)
print("Postfix Expression:", postfix_expression)
