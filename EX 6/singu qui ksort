def quick_sort(S, low = 0, high = -1):
    """
    This function takes a list sorts with quick sort method
    original list is changed.
    
    S : The list to be sorted.

    returns : None
    """
    global swap, comparisions

    # Initial validation and base case
    if high == -1:
        comparisions += 1
        high = len(S)-1
    if low >= high : 
        comparisions += 1
        return
    # pivot selecter by median of three elements
    mid = len(S)//2
    a, b, c = S[0], S[mid], S[-1]
    if (a>b and a<c) or (a<b and a>c):
        comparisions += 4
        median = a
        S[0] ,S[-1] = S[-1], S[0]
    elif (b<a and b>c) and (b>a and b<c):
        comparisions += 4
        median = b
        S[mid], S[-1] = S[-1], S[mid]
    else:
        median = c
    
    # Sorting based on pivot
    pivot = S[high]
    l_mover = low
    r_mover = high-1
    while l_mover <= r_mover:
        comparisions += 1
        while l_mover <= r_mover and S[l_mover] < pivot :
            comparisions += 1
            l_mover += 1
        while l_mover <= r_mover and S[r_mover] > pivot :
            comparisions += 1
            r_mover -= 1
        # swapping the elements after finding its in the wrong side of
        # pivot
        if l_mover <= r_mover:
            comparisions += 1
            S[l_mover], S[r_mover] = S[r_mover], S[l_mover]
            swap += 1
            l_mover, r_mover = l_mover+1, r_mover-1
    S[l_mover], S[high] = S[high], S[l_mover]
    quick_sort(S, low, l_mover-1)
    quick_sort(S, l_mover+1, high)


lst = [7,5,3,2,6,1,89,23,4,2]
print(f"\nlist : {lst}\n")
quick_sort(lst)
print(f"sorted_list by iteration : {lst}" )
print(lst)